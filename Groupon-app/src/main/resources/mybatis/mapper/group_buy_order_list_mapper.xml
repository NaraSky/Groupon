<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.infrastructure.dao.IGroupBuyOrderListDao">

    <!-- 定义GroupBuyOrderList实体的数据库列到属性的映射关系 -->
    <resultMap id="dataMap" type="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="team_id" property="teamId"/>
        <result column="order_id" property="orderId"/>
        <result column="activity_id" property="activityId"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="goods_id" property="goodsId"/>
        <result column="source" property="source"/>
        <result column="channel" property="channel"/>
        <result column="original_price" property="originalPrice"/>
        <result column="deduction_price" property="deductionPrice"/>
        <result column="status" property="status"/>
        <result column="out_trade_no" property="outTradeNo"/>
        <result column="out_trade_time" property="outTradeTime"/>
        <result column="biz_id" property="bizId"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <!-- 插入新的团购订单记录
         参数：GroupBuyOrderList对象（包含user_id、team_id等字段）
         返回：影响的数据库行数 -->
    <insert id="insert" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        insert into group_buy_order_list(
            user_id, team_id, order_id, activity_id, start_time,
            end_time, goods_id, source, channel, original_price,
            deduction_price, status, out_trade_no, biz_id, create_time, update_time
        )
        values(
                  #{userId}, #{teamId}, #{orderId}, #{activityId}, #{startTime},
                  #{endTime}, #{goodsId}, #{source}, #{channel}, #{originalPrice},
                  #{deductionPrice}, #{status}, #{outTradeNo}, #{bizId}, now(), now()
              )
    </insert>

    <!-- 根据外部交易号和用户ID查询未完成的团购订单记录
         参数：GroupBuyOrderList对象（需包含outTradeNo和userId）
         返回：符合条件的GroupBuyOrderList对象 -->
    <select id="queryGroupBuyOrderRecordByOutTradeNo"
            parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList" resultMap="dataMap">
        select user_id, team_id, order_id, activity_id, start_time,
               end_time, goods_id, source, channel, original_price, deduction_price, status
        from group_buy_order_list
        where out_trade_no = #{outTradeNo} and user_id = #{userId} and status = 0
    </select>

    <!-- 根据用户ID和活动ID统计订单数量
         参数：GroupBuyOrderList对象（需包含userId和activityId）
         返回：订单数量（整数） -->
    <select id="queryOrderCountByActivityId" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList"
            resultType="java.lang.Integer">
        select count(id)
        from group_buy_order_list
        where user_id = #{userId}
          and activity_id = #{activityId}
    </select>

    <!-- 将订单状态更新为"已完成"，并设置外部交易时间和更新时间
         参数：GroupBuyOrderList对象（需包含outTradeTime、outTradeNo和userId）
         返回：影响的数据库行数 -->
    <update id="updateOrderStatus2COMPLETE" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        update group_buy_order_list
        set status = 1, out_trade_time = #{outTradeTime}, update_time = now()
        where out_trade_no = #{outTradeNo} and user_id = #{userId}
    </update>

    <!-- 根据团队ID查询已完成订单的外部交易号列表
         参数：团队ID（String类型）
         返回：符合条件的out_trade_no字符串列表 -->
    <select id="queryGroupBuyCompleteOrderOutTradeNoListByTeamId" parameterType="java.lang.String" resultType="java.lang.String">
        select out_trade_no from group_buy_order_list where team_id = #{teamId} and status = 1
    </select>



</mapper>
