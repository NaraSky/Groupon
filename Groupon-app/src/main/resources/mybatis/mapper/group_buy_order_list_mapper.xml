<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.infrastructure.dao.IGroupBuyOrderListDao">

    <!-- 数据映射：将数据库表group_buy_order_list的列映射到GroupBuyOrderList对象的属性 -->
    <resultMap id="dataMap" type="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="team_id" property="teamId"/>
        <result column="order_id" property="orderId"/>
        <result column="activity_id" property="activityId"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="goods_id" property="goodsId"/>
        <result column="source" property="source"/>
        <result column="channel" property="channel"/>
        <result column="original_price" property="originalPrice"/>
        <result column="deduction_price" property="deductionPrice"/>
        <result column="status" property="status"/>
        <result column="out_trade_no" property="outTradeNo"/>
        <result column="out_trade_time" property="outTradeTime"/>
        <result column="biz_id" property="bizId"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <!--
        插入新的团购订单记录
        @param GroupBuyOrderList 对象，包含用户ID、团队ID等订单信息
        @return 受影响的行数（插入的记录数）
    -->
    <insert id="insert" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        insert into group_buy_order_list(user_id, team_id, order_id, activity_id, start_time,
                                         end_time, goods_id, source, channel, original_price,
                                         deduction_price, status, out_trade_no, biz_id, create_time, update_time)
        values (#{userId}, #{teamId}, #{orderId}, #{activityId}, #{startTime},
                #{endTime}, #{goodsId}, #{source}, #{channel}, #{originalPrice},
                #{deductionPrice}, #{status}, #{outTradeNo}, #{bizId}, now(), now())
    </insert>

    <!--
        根据外部交易号、用户ID和状态查询团购订单记录
        @param outTradeNo 外部交易号
        @param userId 用户ID
        @return 符合条件的GroupBuyOrderList对象（状态为0）
    -->
    <select id="queryGroupBuyOrderRecordByOutTradeNo"
            parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList" resultMap="dataMap">
        select user_id,
               team_id,
               order_id,
               activity_id,
               start_time,
               end_time,
               goods_id,
               source,
               channel,
               original_price,
               deduction_price,
               status
        from group_buy_order_list
        where out_trade_no = #{outTradeNo}
          and user_id = #{userId}
          and status = 0
    </select>

    <!--
        根据用户ID和活动ID查询订单数量
        @param userId 用户ID
        @param activityId 活动ID
        @return 符合条件的订单数量
    -->
    <select id="queryOrderCountByActivityId" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList"
            resultType="java.lang.Integer">
        select count(id)
        from group_buy_order_list
        where user_id = #{userId}
          and activity_id = #{activityId}
    </select>

    <!--
        更新订单状态为完成状态（1），并设置外部交易时间和更新时间
        @param outTradeNo 外部交易号
        @param userId 用户ID
        @param outTradeTime 外部交易时间
        @return 受影响的行数
    -->
    <update id="updateOrderStatus2COMPLETE" parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList">
        update group_buy_order_list
        set status         = 1,
            out_trade_time = #{outTradeTime},
            update_time    = now()
        where out_trade_no = #{outTradeNo}
          and user_id = #{userId}
    </update>

    <!--
        根据团队ID查询已完成订单的外部交易号列表
        @param teamId 团队ID
        @return 外部交易号字符串列表（状态为1）
    -->
    <select id="queryGroupBuyCompleteOrderOutTradeNoListByTeamId" parameterType="java.lang.String"
            resultType="java.lang.String">
        select out_trade_no
        from group_buy_order_list
        where team_id = #{teamId}
          and status = 1
    </select>

    <!--
        根据用户ID和活动ID查询进行中的订单详情列表
        @param activityId 活动ID
        @param userId 用户ID
        @param count 返回结果数量限制
        @return 符合条件的GroupBuyOrderList对象列表（状态0或1且结束时间未到）
    -->
    <select id="queryInProgressUserGroupBuyOrderDetailListByUserId"
            parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList" resultMap="dataMap">
        select user_id, team_id, out_trade_no
        from group_buy_order_list
        where activity_id = #{activityId}
          and user_id = #{userId}
          and status in (0, 1)
          and end_time > now()
        order by id desc
        limit #{count}
    </select>

    <!--
        根据活动ID和随机条件查询其他用户的进行中订单详情列表
        @param activityId 活动ID
        @param userId 排除的用户ID
        @param count 返回结果数量限制
        @return 符合条件的GroupBuyOrderList对象列表（状态0或1且结束时间未到，且团队未结束）
    -->
    <select id="queryInProgressUserGroupBuyOrderDetailListByRandom"
            parameterType="com.lb.infrastructure.dao.po.GroupBuyOrderList" resultMap="dataMap">
        select user_id, team_id, out_trade_no
        from group_buy_order_list
        where activity_id = #{activityId}
          and team_id in (select team_id from group_buy_order where activity_id = #{activityId} and status = 0)
          and user_id != #{userId}
          and status in (0, 1)
          and end_time > now()
        order by id desc
        limit #{count}
    </select>

    <!--
        根据活动ID查询进行中的订单团队列表
        @param activityId 活动ID
        @return 按团队ID分组的GroupBuyOrderList对象列表（状态0或1）
    -->
    <select id="queryInProgressUserGroupBuyOrderDetailListByActivityId" parameterType="java.lang.Long"
            resultMap="dataMap">
        select user_id, team_id, out_trade_no
        from group_buy_order_list
        where activity_id = #{activityId}
          and status in (0, 1)
        group by team_id
    </select>

</mapper>
